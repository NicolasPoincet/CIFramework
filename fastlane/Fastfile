desc "Run before all lane"
before_all do |lane, options|
    if lane != :new_project_version
        scan
    end
end

lane :deploy do
    if git_branch() == "master"
        deploy_pod
    elsif git_branch() == "develop"
        deploy_develop
    end
end

desc "Deployment for tests"
lane :deploy_develop do
    slack(
        slack_url: ENV["SLACK_URL"],
        message: "Build success on develop",
        channel: "#integration",
        success: true,
        payload: { 
            "Build Date" => Time.new.to_s,
            "Built by" => "Travis",
            "Branch" => git_branch()
        }
    )
end

desc "Deploy pod to Cocoapods"
lane :deploy_pod do
    pod_lib_lint
    pod_push

    slack(
        slack_url: ENV["SLACK_URL"],
        message: "Framework successfully released in version " + get_version_number,
        channel: "#integration",
        success: true,
        payload: { 
            "Build Date" => Time.new.to_s,
            "Built by" => "Travis",
            "Branch" => git_branch()
        }
    )
end

desc "Update project version to the new one"
desc "cmd: fastlane new_project_version version:\"1.3.9\""
lane :new_project_version do |options|

    if options[:version]
        CURRENT_VERSION = increment_version_number(
            version_number: options[:version]
        )

        increment_build_number
    
        version_bump_podspec(
            path: "SwitchLanguage.podspec",
            version_number: CURRENT_VERSION
        )

        git_commit(
            path: ["CIFramework.xcodeproj/project.pbxproj",
                    "CIFramework/Info.plist",
                    "CIFrameworkTests/Info.plist",
                    "SwitchLanguage.podspec"], 
            message: "Update version number to " + CURRENT_VERSION
        )

        add_git_tag(
            tag: CURRENT_VERSION
        )

        push_to_git_remote
    end

end

desc "Called on error"
error do |lane, exception|
    slack(
        slack_url: ENV["SLACK_URL"],
        message: "Error on lane " + lane,
        channel: "#integration",
        success: false,
        payload: { 
            "Build Date" => Time.new.to_s,
            "Built by" => "Travis",
            "Branch" => git_branch(),
            "lane" => lane,
            "Exception" => exception
        }
    )
end